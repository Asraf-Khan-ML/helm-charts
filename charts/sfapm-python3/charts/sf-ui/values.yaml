enableDebug: false
archiverEnabled: true
nameOverride: ""
fullnameOverride: ""
imagePullSecrets: []

podSecurityContext:
  {}

cloud:
  aws:
    enable: true
  gcs:
    enable: false
    # Set all of the below entities when Google-Service-Account is being used. Recommended approach unless K8s is running outside GCP (K8s outside GCP flow which will use JSON service-account-keys is not yet implemented)
    use_google_service_account: true
    service_account: "XXXX-compute@developer.gserviceaccount.com OR XXXX@XXXX.iam.gserviceaccount.com"
    region: us-west1
    zone: us-west1-c
  datacenter:
    enable: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # The names of the image pull secrets to be attached to this service account
  imagePullSecrets: []
  # disable mounting sa token inside pods
  automountServiceAccountToken: false
  
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

sfapmui:
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    # Below values are based on requests.
    # Hence value > 100 needs to be calculated based on set limits
    # Below values are calculated such that (limit / request) * 80 -> for 80% target utilization
    targetCPUUtilizationPercentage: 1600
    targetMemoryUtilizationPercentage: 160

  image:
    repository: snappyflowml/sfapm-ui
    tag: 'master-v1-1-4'
    pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 10m
      memory: 100Mi

  service:
    type: NodePort # this is the entrypoint change to Loadbalancer
    nodePort: 30080

  env: {}

  tls:
    enabled: true
    # change these please provide base64 encode certificate and its keys
    # use command base64 -w 0 <filename>
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURrekNDQW51Z0F3SUJBZ0lVZG40T25CcnNKVEVyUWNmaFVGcDBZeVFOckt3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1dURUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeElUQWZCZ05WQkFvTQpHRWx1ZEdWeWJtVjBJRmRwWkdkcGRITWdVSFI1SUV4MFpERVNNQkFHQTFVRUF3d0piRzlqWVd4b2IzTjBNQjRYCkRUSXdNRFl3TlRFeE1UVXhORm9YRFRJeE1EWXdOVEV4TVRVeE5Gb3dXVEVMTUFrR0ExVUVCaE1DUVZVeEV6QVIKQmdOVkJBZ01DbE52YldVdFUzUmhkR1V4SVRBZkJnTlZCQW9NR0VsdWRHVnlibVYwSUZkcFpHZHBkSE1nVUhSNQpJRXgwWkRFU01CQUdBMVVFQXd3SmJHOWpZV3hvYjNOME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXY4N2RmZmZGOGdJcnhpYm5lVVRPZ2FnTXllMXc2RjVvZFI3MUcwRFZ4Q1NVdkhKS1Z5ODkKNUozZVBJd2NSbkJmQ25ONXJNaURkVmZuNWswMVUyUmhLYmswbDF2LzFSMmJJWTFldG1oS3NpbmlvbU5VbzAycApNNW1iTEhTWG9RRWdwT0ZtNUxNcVFVSkwrMkxWdFB2cU5JTzV1THEzYytTY1NVNnZhOFBaU2R3OUVVYnhyYk1qCm9LMHJSTnZJSUlhaVFpOEZJeFJ6VUZRbkYvSGlLSm80NHhsRnhDaGFvZTRHTUN2UVdGVUpOQVNteVZuR2hQYnEKVmFmK1FndEhndG5VNnF5RjIvc0NOQjlhVi94L0w0V0RTMzZUSmZsZlBxalJEMWkybzI5bGZDckVqeXBMaDNyeAoxc0ZudlBiQ1E0TFdvQmxQQkNVdlpSTWNMVVRKZFFjY0h3SURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVMWkxnCjE2RVNla1M1YXFleTMrTG03V1g0V1Jnd0h3WURWUjBqQkJnd0ZvQVVMWkxnMTZFU2VrUzVhcWV5MytMbTdXWDQKV1Jnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUF4bmFRMmpqWHR6eAozNlNmT0hCSzVFQ25Qb3I0dXp2NkVhQnR2Rlgwby9Pajh6SVVwbDFSVllUbXFJcEVIZUc5SVZocndFdi8vOUFRCnRZTncwaWpmUk1tQ0g2L0ZmQTZsWTdFcW5lN0hzVElHU0UxVllOcWwyVTkyN21BemROMUdqRzlpak1uZmpUSVUKeENBL2kyTE1JQ3R2RG5ESUtxdmJ3ZnBSeDFGNHRRL3BZVnp5UnFZRUxZcnZKSXpDTGpQNEs0VjFhdUcwMDh5VApNcHgrcDlWOEpTekhiVTlZdHVvRGJKWlBRVmlXSUNrbkMvWEdYc2VQMGJGQkc1L2Q1Y2xMdnpxM1dJOGRKWDRiClpFMUo2VU9EOWF5N3dJMkF6UUJ4dDNuUzE2cjgwSTBJQ2I4eHVMVVdFM1FVdEs0d256ZnhuZnZCSkVpYk4yQXEKRVpmOEY4MThyUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KCg==
    key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQy96dDE5OThYeUFpdkcKSnVkNVJNNkJxQXpKN1hEb1htaDFIdlViUU5YRUpKUzhja3BYTHoza25kNDhqQnhHY0Y4S2MzbXN5SU4xVitmbQpUVFZUWkdFcHVUU1hXLy9WSFpzaGpWNjJhRXF5S2VLaVkxU2pUYWt6bVpzc2RKZWhBU0NrNFdia3N5cEJRa3Y3Cll0VzArK28wZzdtNHVyZHo1SnhKVHE5cnc5bEozRDBSUnZHdHN5T2dyU3RFMjhnZ2hxSkNMd1VqRkhOUVZDY1gKOGVJb21qampHVVhFS0ZxaDdnWXdLOUJZVlFrMEJLYkpXY2FFOXVwVnAvNUNDMGVDMmRUcXJJWGIrd0kwSDFwWAovSDh2aFlOTGZwTWwrVjgrcU5FUFdMYWpiMlY4S3NTUEtrdUhldkhXd1dlODlzSkRndGFnR1U4RUpTOWxFeHd0ClJNbDFCeHdmQWdNQkFBRUNnZ0VCQUt0ZTdqSXdBQ0Zib3pTbGFjYkZuU1BtdTVabW1LeGtQVHYzYnRMc3VKRkkKaGNOZzhkNjNqTHNIK1psckxaQVpzakNxUDVvS2hMbUEwdWJITU0vVExhU1RudE5sRlV5WjZSS3ZObUlQQ0QzcQpnbHpJRnNUWkRFWFlCZlpRTFhGaWlvSUdDV0pvV1daNUQxNEpUaHNud0hjdkFlNTBsSmZ0TjEyZitjZDA4bHl6CjV5Q1g1ODJsMnAwUUVDUlRQc0lVRGlHck9uYVpsY2k2bEhLZWIwbVdaR0Z0dEZGbytIZGdqcHIyTytreFN3SVMKY1p5MDk3RFJyODgwMzkzbVdUaDVnODFFeGpheVQwUUlQSGNlSUFORkRmUW9WSnhQMXAraEtNTjdnMTJIWTBpMQowOXoyU3czR1ZhNXFlV2NTdUkzOTg3aUtDNTRQeHBYK3M3UlQ4aWRIaUtFQ2dZRUE2alZvdDlRU3B3ZlQ3VzVzCnBDSFNIcTV2NDUvVFFLNlovRWR0c3RQaE04aFhzZ2ZYbThhbE9kYXZJbVY2d2IxMHZsRnoxemg4cEh6RCtZdEwKSXJ1clBRL3lDR0VjeS9vZmtLcmF3UGxrUjE1YkVuYVlBWTIxelVObGRsVFZCOUlNVFcxYjRWaEpXQ0RQTnZWMApIMlVsM0xYWngxM2VaZklZT2IrMXJLT0t4VmtDZ1lFQTBhZUZoa0g0cVNUaHdNVUNpTm9aVXNsVlFkY2NMSGw4ClJZZjR3dHhZTnV1VTRPZm1JVE1XZWVtaEdENTNVQjBoVnp1dkc1UmgveDhQRDQyWm5NY3JpQk9oNEx4MGVGSksKMkR6czVjNmwyOVVlRS9laGJmNFNxR3NieEhwUHNDRWU4WnRTYUFoems2Z1R5VG13bEVOTmJqZTYrQnRCM0hXeApuRXZLZmMxWHBqY0NnWUJCNjVKejJ6Nzh3RmxJQk1LVFYrbWFOU0xOQUprbkpYMjE0aXpnSG43T1lsODhmclNTCjVkQnZmUnVDSk9udVNmTG45bWtTZEpXd2ZtVnlnV0ErZ0cvc0dlYlhzTzI0QThpS29XdzgwSFVIR1dtc3dyQjYKRDNiU05Wd0RlRkVWaUd0cUI1UEswMXloYjJxalgyYTF4M1Jtc05DQktzeUVDU1lFYXc4cGJrYUswUUtCZ0RIYworUG5raU9LWnZnT2VGNnM2ekJrUGYzS0lXZEFPR010a3VucUY4NGtrWUtWWklqZTFNZHhPLzV5SGh0TU1DcGozCnZmNytQSXh6ODU0TVhJT1lMemRQREFvcWFEMFJ2WEZPbEQxWDk4U2dIR1k5V0N5VDZCWWNXMTlRZzlGdEh6SHgKY2hrQ0laTDF2N2IxUEpVV3FMelZEbWZoKzdrV1dPYkdjK09WeWduakFvR0FLajRnYzFOMFkxQXlEQzczZEZxTQo2ZUJ2QjIzTmNxNmx6M0cxVHl5b0RCWDJOeDFmQ2l1aVNzSTdJbkZnYTBWQ0w5RE5CVjNaYjlKdGIrdlhZcmlRCmhpQU9BR2xSSGlOTXJ6MXo2aUhGd1FtYmRMU1JzUEFocC8xeE1jd0dEVWpuYmVoN1ZjRFZjbE1EUUlXRUNibnEKc1B3T2dwZ05HY1FqejhlcjFzLzNnNms9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0KCg==

sfapm:
  service:
    type: ClusterIP
    port: 8000
  
vizbuilder:
  service:
    type: ClusterIP
    port: 8000

commands:
  service:
    type: ClusterIP
    port: 8000

esmanager:
  service:
    type: ClusterIP
    port: 8000

podAnnotations:
  prometheus.io/scrape: "false"

global:
  sfappname: sf-portal-app
  sfprojectname: snappyflow-app
  sfappname_key: snappyflow/appname
  sfprojectname_key: snappyflow/projectname
  nginx_geo_info_collection: true
  nginx_ua_parsing: true
  enable_sftrace: false
  key: ""

  sfNodeManager:
    enabled: false
    priorityClassName: sf-critical-pod
  sfScheduler:
    enabled: false
    schedulerName: sf-scheduler